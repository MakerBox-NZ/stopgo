# -*- coding: utf-8 -*-
import wx
import wx.lib.scrolledpanel
import six
import os
import sqlite3 as sq
from datetime import datetime, date
import PythonMagick as Magick
import time
import errno
import pref
import startprompt
import about
import json
import ingest
import re
import shutil
import subprocess
from sys import platform as _plat
import sys
import logging
import logging.handlers

try:
    import vlc
    STAT_VLC=1
except:
    STAT_VLC=0
    
USE_BUFFERED_DC = True
ID_TIMER = 100

class GUI(wx.Frame):
    def __init__(self, parent, id, title, style, clargs, rootdir):
        if _plat.startswith('win'):
            HANDLER = logging.handlers.WatchedFileHandler(os.environ.get("LOGFILE", os.path.join(os.path.expanduser('~'), 'stopgo.log')))
        else:
            HANDLER = logging.handlers.WatchedFileHandler(os.environ.get("LOGFILE", os.path.join('/','tmp','stopgo.log')))

        FORMATTER = logging.Formatter(logging.BASIC_FORMAT)
        HANDLER.setFormatter(FORMATTER)

        if not clargs.has_key('verbose'):
            root = logging.getLogger()
            root.setLevel(os.environ.get("LOGLEVEL", "INFO"))
            root.addHandler(HANDLER)
            
        logging.exception("Debugging on.")
        #First retrieve the screen size of the device
        self.screenSize = wx.DisplaySize()
        self.framlog = 0
        self.thumbsize = 180
        self.camset = 0
        self.prefdate = 0
        prefstr = pref.PrefProbe().PrefGet()
        logging.exception(prefstr)
        logging.exception(type(prefstr))
        self.myprefs = prefstr
        #self.myprefs = json.dumps(prefstr, sort_keys=True)
        #self.screenSize = [ 786, 768 ]
        self.screenWidth = int(self.screenSize[0])
        self.screenHeight = int(self.screenSize[1])
        #self.screenWidth = int(self.screenSize[0] / 3)
        #self.screenHeight = int(self.screenSize[1] / 1.5)
        self.hasSelected = False
        self.previous = 0
        #fontsy = wx.SystemSettings.GetFont(wx.SYS_SYSTEM_FONT).GetPixelSize()        
        wx.Frame.__init__(self, parent, id, title, size=(self.screenWidth, self.screenHeight), style=wx.DEFAULT_FRAME_STYLE)
        self.timer = wx.Timer(self, ID_TIMER)
        self.blick = 0
        self.Bind(wx.EVT_TIMER, self.OnTimer, id=ID_TIMER)
        self.Bind(wx.EVT_CHAR_HOOK, lambda event, args=(True, ):self.OnKeyDown(event, args))
        self.clargs = clargs
        logging.exception(prefstr)
        self.InitUI(rootdir)
        
    def InitUI(self,rootdir):
        '''
        Create the $APP window. Do not load a project.
        '''
        self.rootdir = rootdir
        self.CreateMenuBar()
        self.BuildStatusBar()

        vbox  = wx.BoxSizer(wx.VERTICAL)
        self.panel1 = wx.Panel(self)

        self.viewport = wx.Panel(self.panel1, wx.ID_ANY, size=(self.screenWidth/2,self.screenHeight/2))
        self.panel1.SetBackgroundColour("#000000")
        self.panel1.Bind(wx.EVT_PAINT, self.OnPaint)
        self.viewport.SetBackgroundColour("#101010")
        self.hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.hbox.AddStretchSpacer(1)
        self.hbox.Add(self.viewport, proportion=0, flag=wx.ALIGN_CENTER, border=0)
        self.hbox.AddStretchSpacer(1)
        self.Bind(wx.EVT_CHAR_HOOK, lambda event, args=(True, ): self.OnKeyDown(event, args))
        self.panel1.SetSizer(self.hbox)

        vbox.Add(self.panel1, 4, wx.EXPAND | wx.ALIGN_CENTER)

        hbox1 = wx.BoxSizer(wx.VERTICAL)
        self.panel2 = wx.Panel(self, size=(-1,50))
        self.panel2.SetBackgroundColour("#d4d4d4")
        hbox1.Add(self.panel2, flag=wx.RIGHT,border=8)
        btnbox = wx.BoxSizer(wx.HORIZONTAL)
        self.Refresh()
        self.panel1.Refresh()

        #button states
        self.bplayicon = wx.Image(os.path.join(os.path.dirname(self.rootdir),'share','stopgo','images','play.png')).ConvertToBitmap()
        self.bstopicon = wx.Image(os.path.join(os.path.dirname(self.rootdir),'share','stopgo','images','stop.png')).ConvertToBitmap()        
        self.brecicon = wx.Image(os.path.join(os.path.dirname(self.rootdir),'share','stopgo','images','capture.png')).ConvertToBitmap()
        self.brecxicon = wx.Image(os.path.join(os.path.dirname(self.rootdir),'share','stopgo','images','capture.png')).ConvertToGreyscale().ConvertToBitmap()
        self.bplayxicon = wx.Image(os.path.join(os.path.dirname(self.rootdir),'share','stopgo','images','play.png')).ConvertToGreyscale().ConvertToBitmap()

        # the buttons
        self.brec = wx.BitmapButton(self.panel2, -1, self.brecxicon, pos=(10, 20), style=wx.NO_BORDER)
        self.bplay = wx.BitmapButton(self.panel2, -1, self.bplayxicon, pos=(10, 20), style=wx.NO_BORDER)

        # TODO make this cross platform
        # HELP I have no idea how Win or Mac interface with peripherals
        camlist = []
        if _plat.startswith('linux'):
            for item in os.listdir('/dev'):
                if item.startswith('video'):
                    camlist.append(item)
        elif _plat.startswith('darwin'):
            pass
        elif _plat.startswith('win'):
            import re
            logging.exception('Enumerating cameras.')
            # probe for cams
            ffproc = subprocess.Popen(['ffmpeg','-list_devices','true','-f','dshow','-i','dummy','-hide_banner'],stderr=subprocess.PIPE)
            # get a hackedtogether [list] of ffmpeg dshow output
            ffraw = ffproc.stderr.read().split(']')
            c = 0
            n = 1
            logging.exception(c)
            while (c < len(filter(lambda x:re.search(r'\ \ +\".*\"', x), ffraw))):
                additem = filter(lambda x:re.search(r'\ \ +\".*\"', x), ffraw)[0].split('"')[1]
                if additem in camlist:
                    camlist.append(additem + ' #' + str(n))
                    n = n+1
                    c = c+1
                elif not additem in camlist:
                    camlist.append(additem)
                    c = c+1
                else:
                    logging.exception('Could not add enumerated item.')
                    c = c+1
                #camlist.append('camera #' + str(c) )

        #print(type(camlist))#DEBUG
        camcombo = wx.ComboBox(self.panel2, choices=camlist, style=wx.CB_READONLY)
        camcombo.SetValue("Set Camera")
        camcombo.Bind(wx.EVT_COMBOBOX, lambda event, args=camcombo: self.OnCamSelect(event,args) )
        self.panel2.Refresh()
        
        btnbox.Add(self.bplay, flag=wx.ALL, border=8 )
        #btnbox.Add(bstop, flag=wx.ALL, border=8 )
        btnbox.AddStretchSpacer(1)
        btnbox.Add(self.brec, flag=wx.ALL, border=8 )
        btnbox.AddStretchSpacer(1)
        btnbox.Add(camcombo, flag=wx.TOP,border=12)

        self.panel2.SetSizer(btnbox)
        hbox1.Add(btnbox, flag=wx.EXPAND, border=0)
        vbox.Add(self.panel2, 0, wx.EXPAND)

        self.hbox2 = wx.BoxSizer(wx.HORIZONTAL)
        # TODO adjust height of panel3? make it adjustable. that would be neat
        self.panel3 = wx.lib.scrolledpanel.ScrolledPanel(self,size=(self.screenWidth,250))
        vbox.Add(self.panel3, 1, wx.EXPAND)

        self.panel3.SetupScrolling()
        self.panel3.SetSizer( self.hbox2 )
        self.SetAutoLayout(True)
        self.SetSizer(vbox)
        self.Layout()

        try:
            #instatiate VLC
            self.Instance = vlc.Instance()
            self.stream = self.Instance.media_player_new()
        except:
            if not STAT_VLC:
                dlg = wx.MessageDialog(self, 'Missing a VLC Python library. You need to install VLC from http://videolan.org. Report this to the StopGo developers.', '',wx.OK | wx.ICON_ERROR)
                val = dlg.ShowModal()
                if val == wx.ID_OK:
                    dlg.Destroy()
            else:
                dlg = wx.MessageDialog(self, 'Missing VLC. You need to install VLC from http://videolan.org. Report this to the StopGo developers.', '',wx.OK | wx.ICON_ERROR)
                val = dlg.ShowModal()
                if val == wx.ID_OK:
                    dlg.Destroy()

        #instatiate VLC
        self.Instance = vlc.Instance()
        self.stream = self.Instance.media_player_new()

        #was stopgo started pointing at a project directory?
        if self.clargs.has_key('project'):
            logging.exception('Shell set to no prompt.')
            self.WorkSpace(False)
        elif self.myprefs.has_key('prompt') and self.myprefs['prompt'] == 'No prompt':
            logging.exception('Preferences set to no prompt.')
            pass
        else:
            logging.exception('DEBUG: project name was provided from shell.')
            #or was stopgo started with no directory?
            logging.exception('DEBUG: no target dir provided.')
            self.start = startprompt.Choice(self, -1)
            
    def CreateMenuBar(self):
        menubar = wx.MenuBar()
        fileMenu = wx.Menu()
        nitem = fileMenu.Append(wx.ID_NEW,  '&New',  'New project' )
        oitem = fileMenu.Append(wx.ID_OPEN, '&Open', 'Open project')
        self.ritem = fileMenu.Append(wx.ID_SAVEAS, '&Render\tCtrl-r', 'Render')
        self.iitem = fileMenu.Append(wx.ID_ANY, '&Import\tCtrl-i', 'Import image directory')
        self.qitem = fileMenu.Append(wx.ID_EXIT, '&Quit', 'Quit application')

        editMenu = wx.Menu()
        self.zitem = editMenu.Append(wx.ID_UNDO, '&Undo\tCtrl-z', 'Undo Delete')
        #yitem = editMenu.Append(wx.ID_REDO, '&Redo', 'Redo')
        self.ditem = editMenu.Append(wx.ID_DELETE, '&Delete\tDelete', 'Delete')
        pitem = editMenu.Append(wx.ID_PREFERENCES, '&Preferences\tCtrl-,', 'Preferences')

        helpMenu = wx.Menu()
        aitem = helpMenu.Append(wx.ID_ABOUT, '&About\tCtrl-?', 'About Stopgo')

        menubar.Append(fileMenu, '&File')
        menubar.Append(editMenu, '&Edit')
        menubar.Append(helpMenu, '&Help')

        self.Bind(wx.EVT_MENU, lambda event, args=(False): self.OpenFile(event,args), oitem)
        self.Bind(wx.EVT_MENU, self.NewFile, nitem)
        self.Bind(wx.EVT_MENU, self.Pref, pitem)
        self.Bind(wx.EVT_MENU, lambda event,args=(False): ingest.Ingest(self),self.iitem)
        self.Bind(wx.EVT_MENU, self.SimpleQuit, self.qitem)
        self.Bind(wx.EVT_CLOSE, self.SimpleQuit, self.qitem)
        self.Bind(wx.EVT_MENU, self.About, aitem)
        self.SetMenuBar(menubar)
        
    def BuildStatusBar(self):

        sb = self.CreateStatusBar(2)
        sb.SetStatusWidths([-3, -1])
        sb.SetStatusText("Ready")

    def BindKeys(self,dbfile):
        '''
        Bind keyboard shortcuts for application.
        '''
        self.Bind(wx.EVT_MENU, lambda event, args=('MENU_DEL',dbfile): self.OnKeyDown(event,args), self.ditem)
        self.Bind(wx.EVT_MENU, lambda event, args=dbfile: self.Undo(event,args), self.zitem)
        self.Bind(wx.EVT_BUTTON, lambda event, args=('wx.WXK_SPACE',dbfile): self.OnKeyDown(event,args), self.bplay)
        self.Bind(wx.EVT_BUTTON, lambda event, args=(dbfile): self.CaptureCanvas(event,args), self.brec)

        self.panel3.Bind(wx.EVT_KEY_DOWN, lambda event, args=(dbfile): self.OnKeyDown(event, args))
        self.panel3.Bind(wx.EVT_LEFT_DOWN, self.OnMouseClick)
        self.Bind(wx.EVT_MENU, lambda event, args=(dbfile):self.OnQuit(event,args), self.qitem)
        self.Bind(wx.EVT_CLOSE, lambda event, args=(dbfile):self.OnQuit(event,args), self.qitem)
        self.Bind(wx.EVT_MENU, lambda event, args=(dbfile):self.OnRender(event,args), self.ritem)

    def WorkSpace(self,e):
        '''
        Load in a project.
        '''
        logging.exception(self.clargs)
        dbfile = self.clargs['project']

        if not os.path.isfile(dbfile):
            dlg = wx.MessageDialog(self, 'Project not found. Browse for the file?', 
                '',wx.YES_NO | wx.YES_DEFAULT | wx.CANCEL | wx.ICON_QUESTION)

            val = dlg.ShowModal()

            if val == wx.ID_YES:
                self.OpenFile(e,True)

            elif val == wx.ID_CANCEL:
                dlg.Destroy()
        else:
            self.OpenFile(False,dbfile)
            self.bplay.SetBitmapLabel(self.bplayicon)
            self.panel2.Refresh()
            
        #update timeline view
        self.Layout()
        self.panel3.SetFocus()
        print('leaving workspace') #debug

    def OnCamSelect(self,e,camcombo):
        self.stream.stop()
        self.camhero = camcombo.GetCurrentSelection()
        logging.exception(self.camhero)
        self.camset = 1

        if _plat.startswith('linux'):
            self.Media = self.Instance.media_new('v4l2:///dev/video' + str(self.camhero))
        elif _plat.startswith('darwin'):
            pass
        elif _plat.startswith('win'):
            logging.exception(self.camhero)
            #self.Media = self.Instance.media_new("dshow:// #" + str(self.camhero))
            self.Media = self.Instance.media_new(u"dshow:// :dshow-vdev=" + unicode(camcombo.GetStringSelection()) + " :dshow-adev=none")

        self.stream.set_media(self.Media)

        if _plat.startswith('linux'):
            self.stream.set_xwindow(self.viewport.GetHandle())
        elif _plat.startswith('darwin'):
            pass
        elif _plat.startswith('win'):
            self.stream.set_hwnd(self.viewport.GetHandle())

        self.stream.play()
        self.brec.SetBitmapLabel(self.brecicon)
        print('leaving OnCamSelect') #debug

    def NewFile(self,e):

        wcd='All files(*)|*'
        dest = 'stopgo_project_'
        destid = int(time.time())

        try:
            dirname = self.clargs['project']
        except OSError:
            dirname = os.path.expanduser('~')
        except:
            dirname = os.path.join(os.path.expanduser('~'),self.myprefs['dir'])
            
        sd = wx.FileDialog(self, message='Save file as...', 
            defaultDir=dirname, defaultFile='stopgo_project_' + str(destid),
            wildcard=wcd, 
            style=wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT)

        if sd.ShowModal() == wx.ID_OK:
            projnam = sd.GetFilename()
            projpath= os.path.join(sd.GetPath(),projnam)
            os.makedirs( os.path.join(os.path.dirname(projpath),'images'))
            os.makedirs( os.path.join(os.path.dirname(projpath),'thumbs'))
            os.makedirs( os.path.join(os.path.dirname(projpath),'trash'))
            if not os.path.exists(os.path.join(projpath,dest)):
                with open(projpath, 'w') as f:
                    f.write(str(destid))
                f.close()

        dbfile = projpath
        self.imgdir = os.path.join(os.path.dirname(projpath), 'images')
        self.thumbdir = os.path.join(os.path.dirname(projpath),'thumbs')
        self.trashdir = os.path.join(os.path.dirname(projpath),'trash')
        logging.exception(dbfile)
        logging.exception(projpath)
        logging.exception(self.imgdir)
        logging.exception(self.thumbdir)
        logging.exception(self.trashdir)

        self.BindKeys(dbfile)
        
        sb = self.GetStatusBar()
        stat = os.path.basename(projpath) + ' created'
        sb.SetStatusText(stat, 0)
        sb.SetStatusText('', 1)
        sd.Destroy()

        
    def BuildTimeline(self,dbfile):

        for child in self.panel3.GetChildren():
            logging.exception(child)
            child.Destroy()


        latestfram = int(str(os.listdir(self.imgdir)[-1]).split('.')[0])
        #returns int(number_of_frame)
        #example: 1 or 12 or 145
        
        try:
            self.framlog += 1
            logging.exception(self.framlog)
        except:
            print('Cannot find last frame') #debug
            logging.exception('Looking for last frame but did not find.')
            pass

        tbl_timeline = [file for file in os.listdir(self.imgdir) if file.endswith('.png')]
        print(tbl_timeline) #debug
        for entry in tbl_timeline:
            img = self.MakeThumbnail(os.path.join(self.imgdir,entry), self.thumbsize)
            self.imageCtrl = wx.StaticBitmap(self.panel3, wx.ID_ANY, 
                                             wx.BitmapFromImage(img),name=entry)
            self.imageCtrl.SetBitmap(wx.BitmapFromImage(img))
            self.imageCtrl.Bind( wx.EVT_LEFT_DOWN, self.OnLeftClick )
            self.imageCtrl.Bind( wx.EVT_LEFT_UP, self.OnLeftRelease )
            
            logging.exception(self.imageCtrl.GetId() )
            self.hbox2.Add( self.imageCtrl, 0, wx.ALL, 5 )

        self.Layout()
        self.panel3.SetFocus()
        self.BindKeys(dbfile)
        self.hbox2.Layout()
        self.panel3.Refresh()
        self.panel3.Update()
        self.Refresh()

    def OpenFile(self,e,filename):

        wcd = 'All files (*)|*|StopGo files (*.db)|*.db'
        openMsg='Choose a project file'
            
        try:
            dirname = self.clargs['project']
        except OSError:
            dirname = os.path.expanduser('~')
        except:
            dirname = os.path.join(os.path.expanduser('~'),self.myprefs['dir'])
            od = wx.FileDialog(self, message=openMsg,
                               defaultDir=dirname,defaultFile='',
                               wildcard=wcd, style=wx.FD_OPEN|wx.FD_CHANGE_DIR)
                 
            if od.ShowModal() == wx.ID_OK:
                dbfile = od.GetPath()
                self.imgdir = os.path.join( os.path.dirname( od.GetPath()),'images')
                self.thumbdir = os.path.join( os.path.dirname( od.GetPath()),'thumbs')
                self.trashdir = os.path.join( os.path.dirname( od.GetPath()),'trash')

            else:
                dbfile = filename
                self.imgdir = os.path.join( os.path.dirname(filename),'images')
                self.thumbdir = os.path.join( os.path.dirname(filename),'thumbs')
                self.trashdir = os.path.join( os.path.dirname( od.GetPath()),'trash')
                logging.exception("Image dir is ", self.imgdir)
                logging.exception("Thumbnail dir is ", self.thumbdir)
                logging.exception("Thumbnail dir is ", self.trashdir)

        # by this point, we should have a file name
        try: #is this a valid stopgo project file
            os.path.isfile(dbfile)
            sb = self.GetStatusBar()
            stat = os.path.basename(dbfile) + ' opened'
            sb.SetStatusText(stat, 0)
            sb.SetStatusText('', 1)

        except:
            dlg = wx.MessageDialog(self, 'Invalid StopGo Project file. Try to open a different one?', 
                                   '',wx.OK | wx.CANCEL | wx.ICON_ERROR)
            val = dlg.ShowModal()

            if val == wx.ID_OK:
                self.OpenFile(e,filename)

            elif val == wx.ID_CANCEL:
                dlg.Destroy()

        try:
            od.Destroy()            
        except:
            pass

        self.BuildTimeline(dbfile)

    def MakeThumbnail(self, filepath, PhotoMaxSize):
        img = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
        # scale image, preserve aspect ratio
        W = img.GetWidth()
        H = img.GetHeight()
        if W > H:
            NewW = PhotoMaxSize
            NewH = PhotoMaxSize * H / W
        else:
            NewH = PhotoMaxSize 
            NewW = PhotoMaxSize * W / H
        img = img.Scale(NewW,NewH)
        imgb = wx.BitmapFromImage(img)
        return img

    def OnMouseClick(self,e):
        logging.exception('panel3 clicked.')
        #self.hasSelected = False
        pass

    def OnLeftClick(self,e):
        """Detect whether user is selecting a frame or not.
        """
        if self.hasSelected:
            # selection exists. take badge from previous.
            img = self.MakeThumbnail(os.path.join(self.imgdir, self.selected.GetName() ), self.thumbsize)
            self.selected.SetBitmap(wx.BitmapFromImage(img) )
            if e.GetId() == self.previous:
                self.hasSelected = True
            else:
                self.hasSelected = False
                
    def OnLeftRelease(self,e):

        self.stream.stop()
        self.brec.SetBitmapLabel(self.brecxicon)
        self.bplay.SetBitmapLabel(self.bplayicon)

        if self.hasSelected:
            #if we are here then the frame selected was clicked again
            img = self.MakeThumbnail(os.path.join(self.imgdir, self.selected.GetName() ), self.thumbsize)
            self.selected.SetBitmap(wx.BitmapFromImage(img) )
            self.hasSelected = True
            self.stream.play() #return to REC MODE            
            self.brec.SetBitmapLabel(self.brecicon)
            self.bplay.SetBitmapLabel(self.bplayxicon)
            self.previous = -1
            img = self.MakeThumbnail(os.path.join(os.path.dirname(self.rootdir),'share','stopgo','images','s.png'), self.screenWidth/2)#640
            self.PaintCanvas(img)
            self.viewport.Refresh()
            
        if not self.hasSelected:
            # we clicked something new
            # get new selection
            self.selected = e.GetEventObject()
            img = self.MakeThumbnail(os.path.join(self.imgdir, self.selected.GetName() ), self.thumbsize + 3)
            imgb = wx.BitmapFromImage(img)
            dc = wx.MemoryDC(imgb)
            staricon = wx.Image(os.path.join(os.path.dirname(self.rootdir),'share','stopgo','images','select.png') )
            star = wx.BitmapFromImage(staricon)
            dc.DrawBitmap(star,133,0)
            dc.SelectObject(wx.NullBitmap)
            del dc
            control = wx.StaticBitmap(self, -1, imgb)
            self.selected.SetBitmap(imgb)
            self.hasSelected = True
            self.previous = self.selected.GetId()
            img = self.MakeThumbnail(os.path.join( self.imgdir, self.selected.GetName() ), self.screenHeight)

        #paint canvas
        #TODO How many times are we going to recalculate screen size, for crying out loud?
        self.GetStatusBar().SetStatusText(self.selected.GetName(), 0)
        self.PaintCanvas(img)

        self.viewport.Hide()
        self.viewport.Show()
        self.viewport.Refresh()
            
    def OnPaint(self, event):
        """Auto-triggered on a paint event.
        """
        if _plat.startswith('linux'):
            dc = wx.PaintDC(self)
            dc.Clear()
        elif _plat.startswith('darwin'):
            pass
        elif _plat.startswith('win'):
            if USE_BUFFERED_DC:
                dc = wx.BufferedPaintDC(self, self._Buffer)
            else:
                dc = wx.PaintDC(self)
                dc.DrawBitmap(self._Buffer, 0, 0)
                dc.Clear()

    def OnionSkin(self,img):
        logging.exception('onion skin')

        try:
            self.stream.video_set_marquee_int(vlc.VideoMarqueeOption.Enable, 1)
            self.stream.video_set_logo_int(vlc.VideoLogoOption.enable, 1)
            self.stream.video_set_logo_string(vlc.VideoLogoOption.file, img)
            #self.stream.video_set_logo_string(vlc.VideoLogoOption.file, os.path.join(os.getcwd(),'gnu.png'))
            self.stream.video_set_logo_int(vlc.VideoLogoOption.delay, 0)
            self.stream.video_set_logo_int(vlc.VideoLogoOption.logo_x, 10)
            self.stream.video_set_logo_int(vlc.VideoLogoOption.logo_y, 10)
            self.stream.video_set_logo_int(vlc.VideoLogoOption.opacity, 84)
            self.stream.video_set_logo_int(vlc.VideoLogoOption.position, 100)
            self.stream.video_set_logo_int(vlc.VideoLogoOption.repeat, 1)
        except:
            print('Onion skin failure.') # debug
            logging.exception("EXCEPT: Onion skin failure")

    def PaintCanvas(self,img):
        bmp    = wx.BitmapFromImage( img )
        canvas = wx.StaticBitmap( self.viewport, bitmap=bmp, pos=(0,0) )

    def CaptureCanvas(self,e,args):
        playstat = str(self.stream.get_state())
        logging.exception(playstat)

        if not playstat == "State.Playing":
            logging.exception('SELECTED DETECTED', self.framlog)
            self.framlog = self.framlog
            # restore colour
            img = self.MakeThumbnail(os.path.join(self.imgdir, self.selected.GetName() ), self.thumbsize)
            self.selected.SetBitmap(wx.BitmapFromImage(img) )
            self.stream.play()
            self.brec.SetBitmapLabel(self.brecicon)
        else:
            print('no selection detected in CapCan') #debug
            logging.exception('NO SELECT DETECTED')
            self.TakeSnapshot(e,args)

    def TakeSnapshot(self,e,args):

        print("TakeSnapshot", self.framlog) #debug
        logging.exception('CAPTURE')
        if self.camset == 1:
            print("%fram - framlog is",self.framlog," and is about to have 1 added to it ") #debug
            self.framlog += 1
            iname = str(self.framlog).zfill(3)+'.png'
            vidcap = vlc.libvlc_video_take_snapshot(self.stream,0,os.path.join(self.imgdir, iname),0,0)
            
            # scale for thumbnail
            inmg = os.path.join(self.imgdir,iname)
            img = Magick.Image(str(inmg))
            otmg = os.path.join(self.thumbdir,iname)
            geometry = img.size()
            w, h = geometry.width(), geometry.height()
            new_width = self.thumbsize
            factor = new_width/float(w)
            new_height = int(h * factor)
            img.resize("{}x{}".format(new_width, new_height))
            img.write(str(otmg))

            # add graphically to timeline
            # TODO add thumb to timeline but BIG image to viewport

            img = self.MakeThumbnail(otmg, self.thumbsize)
            self.imageCtrl = wx.StaticBitmap(self.panel3, wx.ID_ANY, wx.BitmapFromImage(img),name=iname)
            self.imageCtrl.SetBitmap(wx.BitmapFromImage(img))
            self.imageCtrl.Bind( wx.EVT_LEFT_DOWN, self.OnLeftClick )
            self.imageCtrl.Bind( wx.EVT_LEFT_UP, self.OnLeftRelease )
            logging.exception(self.imageCtrl.GetId() )
            self.hbox2.Add( self.imageCtrl, 0, wx.ALL, 5 )

            # scroll right 100% to get close to new frame
            self.panel3.Scroll(self.thumbsize,0)
            self.Layout()
            # draw new frame
            self.hbox2.Layout()
            self.panel3.Refresh()
            # scroll WAY right again to show frame
            self.panel3.Scroll(200,0)
            # send the shot to onion skin
            img = os.path.join(self.imgdir, iname)
            self.OnionSkin(img)
            logging.exception(self.framlog)

        else:
            self.camhero = 0
            '''
            dlg = wx.MessageDialog(self, 'Please select your camera first.','',wx.OK | wx.ICON_ERROR)
            val = dlg.ShowModal()
            if val == wx.ID_OK:
                dlg.Destroy()
            if val == wx.ID_CANCEL:
                dlg.Destroy()
            '''
        self.stream.play()
        self.brec.SetBitmapLabel(self.brecicon)

    def SimpleQuit(self,e):
        '''
        If not project is open, just quit.
        '''
        self.stream.stop()#windows?
        self.Close()#linux
        sys.exit()#windows

    def OnQuit(self,event,dbfile):
        if _plat.startswith('linux'):
            dlg = wx.MessageDialog(self, 'Really quit?','', wx.OK | wx.CANCEL | wx.ICON_ERROR)
            val = dlg.ShowModal()
            dlg.Show()

            if val == wx.ID_CANCEL:
                dlg.Destroy()
            elif val == wx.ID_OK:
                OKQuit = self.DBQuit(dbfile)
                if OKQuit == 42:
                    self.Close()

        elif _plat.startswith('darwin'):
            pass
        elif _plat.startswith('win'):
            OKQuit = self.DBQuit(dbfile)
            if OKQuit == 42:
                self.Close()
                sys.exit()#windows

        self.Refresh()


    def OnRender(self,e,dbfile):

        self.brec.SetBitmapLabel(self.brecxicon)
        self.bplay.SetBitmapLabel(self.bplayxicon)
        self.previous = 0
        wcd='All files(*)|*'
        directory = os.getcwd()
        dest = 'stopgo-render_'
        destid = int(time.time())

        sd = wx.FileDialog(self, message='Render file as...', 
            defaultDir=directory, defaultFile=dest + str(destid) + '.mp4',
            wildcard=wcd, 
            style=wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT)

        if sd.ShowModal() == wx.ID_OK:
            sc_out = sd.GetPath()

        sd.Destroy()
        
        # TODO we need a proper progress bar or indicator here
        GoRender = self.DBQuit(dbfile)
        if GoRender == 42:
            sb = self.GetStatusBar()
            dlg = wx.MessageDialog(self,'Rendering complete.','',wx.OK|wx.ICON_INFORMATION)
            sb.SetBackgroundColour("#d11")
            sb.SetStatusText('Rendering...', 0)
            sb.Refresh()

            if _plat.startswith('linux'):
                P = subprocess.Popen(self.myprefs['encoder'] + " -r "+self.myprefs['fps']+" -pattern_type glob -i '*.png' -b:v "+self.myprefs['bitrate']+" -s " + self.myprefs['profile'] + " -an -pix_fmt yuv420p -deinterlace -y "+sc_out+'.'+self.myprefs['container'], cwd=self.imgdir, shell=True)
                
            elif _plat.startswith('darwin'):
                    pass

            elif _plat.startswith('win'):
                stnum  = int(os.listdir(self.imgdir)[0].split('.')[0])
                aratio = int(''.join(n for n in self.myprefs['profile'] if n.isdigit()))
                P = subprocess.Popen(self.myprefs['encoder'] +' -f image2 -start_number ' + str(stnum) + ' -r '+self.myprefs['fps']+' -s '+self.myprefs['profile']+' -i \"' + self.imgdir + '\%03d.png\" -b:v '+self.myprefs['bitrate']+' -vf scale='+str(aratio)+':-1 -aspect 16:9 -an -pix_fmt yuv420p -deinterlace -y -threads 2 '+sc_out+'.'+self.myprefs['container'], cwd=self.imgdir, shell=True)

            output = P.communicate()[0]
            print(P.returncode," Rendering complete!") #debug

            while True:
                val = dlg.ShowModal()
                if val == wx.ID_OK:
                    sb.SetStatusText('Ready.', 0)
                    sb.SetBackgroundColour("#eee")
                    sb.Refresh()
                    break

            dlg.Destroy()

            self.brec.SetBitmapLabel(self.brecicon)
            self.bplay.SetBitmapLabel(self.bplayicon)
            
        else:
            print('WIN CONFUSION')#debug
            '''
            # windows config not implemented yet
            self.myprefs = 'winconfuse'
            dlg = wx.MessageDialog(self, "Render on Windows not yet supported. For now, render on Linux (it's free).", '',wx.OK | wx.ICON_ERROR)
            val = dlg.ShowModal()
            if val == wx.ID_YES:
                dlg.Destroy()
            '''

    def onBusy(self,msf):
        # TODO implement a better gauge of render time
        #proggy.Tormato(self,-1)
        pass

    def DBQuit(self,dbfile):

        blacklist = [file for file in os.listdir(self.trashdir) if file.endswith('.png')]

        for entry in blacklist:
            # TODO ask user if they want us to do this for them??
            #os.remove(os.path.join(self.trashdir,blackitem[0]) )
            print("You can delete " + entry + " from your project trash.")
        
        return 42

    def OnKeyDown(self, e, args):
        if len(args) == 2:
            key = args[0]
            dbfile = args[1]
        else:
            key = e.GetKeyCode()
            dbfile = args
            logging.exception(dbfile)

        if  key==wx.WXK_ESCAPE:
            logging.exception("ESCAPE", self.selected.GetName() )
            pass
        elif key==wx.WXK_BACK or key=='wx.WXK_BACK':
            self.stream.stop()
            try:
                self.lastdel = self.selected.GetName()
                # TODO parallel processing?
                os.rename(os.path.join(self.imgdir,self.lastdel), os.path.join(self.trashdir,self.lastdel))
                os.rename(os.path.join(self.thumbdir,self.lastdel), os.path.join(self.trashdir,self.lastdel + "_t"))
                self.selected.Destroy()
                self.panel3.Freeze()
                self.hbox2.Layout()
                self.panel3.Refresh()
                self.panel3.Update()
                self.panel3.Thaw()
                self.hasSelected = False
                self.previous = self.selected.GetId()
                
            except:
                logging.exception("EXCEPT: Cannot delete Nothing.")
                pass

        # delete
        elif key==wx.WXK_DELETE or key=='wx.WXK_DELETE' or key=='MENU_DEL':
            self.stream.stop()
            try:
                self.lastdel = self.selected.GetName()
                # TODO parallel processing?
                os.rename(os.path.join(self.imgdir,self.lastdel), os.path.join(self.trashdir,self.lastdel))
                os.rename(os.path.join(self.thumbdir,self.lastdel), os.path.join(self.trashdir,self.lastdel + "_t"))
                self.selected.Destroy()
                self.panel3.Freeze()
                self.hbox2.Layout()
                self.panel3.Refresh()
                self.panel3.Update()
                self.panel3.Thaw()
                self.hasSelected = False
                self.previous = self.selected.GetId()

            except:
                logging.exception("EXCEPT: Cannot delete Nothing.")
                pass

        #play
        elif key==wx.WXK_SPACE or key=='wx.WXK_SPACE':
            self.TimelinePlay()

            
    def TimelinePlay(self):
        """Start or stop playback, or record.

        If in play mode: toggle playback.
        If in record mode: prepare for snapshot.

        Args:
            param1 (int): The first parameter.
            param2 (str): The second parameter.

        Returns:
            bool: The return value. True for success, False otherwise.
        """
        #stops
        playstat = str(self.stream.get_state())
        if playstat.endswith('Stopped') and not self.hasSelected:
            print("We are stapped, and should be in REC mode.")
            print("We would take a picture now.")
        elif playstat.endswith('Stopped') and self.hasSelected:
            print("We are stopped, but we are in PLAY mode.")
            print("We would start playing now.")
        else:
            #if not playstat == "State.Playing":
            print("We are playing, and so we are in PLAY mode.")
            print("We would stop now and set SELECTED to self.latestfram.")

            
        #self.timer.Start()
        #print(self.timer.IsRunning())#false +debug
        '''
        if self.timer.IsRunning():#Timeline is playing
            self.timer.Stop()#stop timer
            self.bplay.SetBitmapLabel(self.bplayicon)#enable play button
            self.brec.SetBitmapLabel(self.brecxicon)#disable record btn
            self.bplay.Refresh() #redraw play button
            self.blick = 0 #send counter back to start
            self.stream.play()#go back to record mode
            self.brec.SetBitmapLabel(self.brecicon)#enable record button
            print("%stop TimelinePlay") #debug


        else: #if not play, then take snapshot
            if self.prefdate == 1:
                self.timer.Start(1000/int(self.myprefs['fps']))
            else:
                self.timer.Start(1000/8)

            self.previous = 0
            img = self.MakeThumbnail(os.path.join(self.imgdir, self.selected.GetName() ), self.thumbsize)
            self.selected.SetBitmap(wx.BitmapFromImage(img) )
            self.framlist = [file for file in os.listdir(self.imgdir) if file.endswith('.png')]
            self.TakeSnapshot('wx.WXK_SPACE',dbfile)
        '''

    def OnTimer(self,e):
        """Triggered whenever Timer starts.

        Args:
            param1 (int): The first parameter.
            param2 (str): The second parameter.

        Returns:
            bool: The return value. True for success, False otherwise.
        """
        self.bplay.SetBitmapLabel(self.bstopicon)
        print("def OnTimer")
        '''
        try:
            filepath = os.path.join(self.imgdir,str(self.framlist[self.blick]).zfill(3))
            # TODO no more resizing of playback would be nice
            img = self.MakeThumbnail(filepath, self.screenWidth/2)#640
            self.PaintCanvas(img)
            self.blick = self.blick + 1
            logging.exception(self.blick)
        except:
            print("%OnTimer BAIL OUT") #debug
            logging.exception('Timer Fail')
            self.timer.Stop()
            #self.bplay.SetBitmapLabel(self.bplayicon)
            self.blick = 0
            self.stream.play()
            #self.brec.SetBitmapLabel(self.brecicon)
        self.panel2.Refresh()
        '''

    def About(self,e):
        about.OnAboutBox(self)

    def Pref(self,e):
        logging.exception('INFO: PrefProbe triggered.')
        pref.PrefProbe()
        pref.GUIPref(None, -1, 'Stopgo Preferences', (self.screenWidth/2, self.screenHeight/2), wx.DEFAULT_FRAME_STYLE)
        self.prefdate = 1

    def Undo(self,e,dbfile):
        sb = self.GetStatusBar()
        ## TODO undo history
        ## HELP this is a bite-sized task
        try:
            os.rename(os.path.join(self.trashdir,self.lastdel), os.path.join(self.imgdir,self.lastdel))
            os.rename(os.path.join(self.trashdir,self.lastdel + "_t"), os.path.join(self.thumbdir,self.lastdel))
            logging.exception(str(self.lastdel) + " not found in " + str(self.trashdir) )
            sb.SetStatusText('Undo successful', 0)
        except:
            sb.SetStatusText('Cannot Undo', 0)

        self.BuildTimeline(dbfile)
            
    def UndoHistory(self,e):
        # TODO: accidentally removed frames?
        # use this UNDO function to create window listing all BLACKSPOT frames
        # restore them from that window
        pass


def main(opts,launch_dir):
    app = wx.App(False)
    window = GUI(None, id=1, title="stopgo", style=wx.DEFAULT_FRAME_STYLE | wx.FULL_REPAINT_ON_RESIZE, clargs=opts, rootdir=launch_dir)
    window.Show()
    app.MainLoop()
    return True
